// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.bs.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var UserData = require("./UserData.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var tableKey = /* record */[/* contents */0];

var component = ReasonReact.reducerComponent("Home");

function createEventArray(eventList) {
  var match = eventList.length === 0;
  if (match) {
    return /* array */[/* record */[
              /* event_id */"-1",
              /* event_name */"",
              /* event_date */"",
              /* event_startTime */"",
              /* event_endTime */"",
              /* event_image */"",
              /* event_host */"",
              /* event_tags : array */[]
            ]];
  } else {
    return $$Array.map((function (array) {
                  return /* record */[
                          /* event_id */Caml_array.caml_array_get(array, 0),
                          /* event_name */Caml_array.caml_array_get(array, 1),
                          /* event_date */Caml_array.caml_array_get(array, 7),
                          /* event_startTime */Caml_array.caml_array_get(array, 5),
                          /* event_endTime */Caml_array.caml_array_get(array, 6),
                          /* event_image */Caml_array.caml_array_get(array, 9),
                          /* event_host */Caml_array.caml_array_get(array, 3),
                          /* event_tags */Caml_array.caml_array_get(array, 10).slice(0, Caml_array.caml_array_get(array, 10).length - 1 | 0).split(",")
                        ];
                }), eventList);
  }
}

function reducer(action, state) {
  if (action.tag) {
    var payload = action[0][1];
    var match = Caml_array.caml_array_get(Caml_array.caml_array_get(payload[/* events */0], 0), 0) !== "-1";
    return /* Update */Block.__(0, [/* record */[
                /* data */payload,
                /* events : array */[match ? createEventArray(payload[/* events */0]) : createEventArray(/* array */[])],
                /* name */payload[/* name */3],
                /* sub_tags */payload[/* sub_tags */1],
                /* sub_clubs */payload[/* sub_clubs */2]
              ]]);
  } else {
    var params = action[1];
    var method_ = action[0];
    return /* SideEffects */Block.__(1, [(function (self) {
                  return UserData.fetchData(method_, params, UserData.Decode[/* getEventData */1], state, (function (payload) {
                                return Curry._1(self[/* send */3], /* Fetched */Block.__(1, [payload]));
                              }));
                })]);
  }
}

var component$1 = ReasonReact.statelessComponent("EventItem");

function make(item, _children) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement("div", {
                          className: "md:w-1/3 overflow-hidden w-full p-4"
                        }, React.createElement("div", {
                              className: "border border-grey-light"
                            }, React.createElement("img", {
                                  className: "h-48",
                                  src: item[/* event_image */5]
                                }), React.createElement("div", {
                                  className: "px-6 py-4"
                                }, React.createElement("div", {
                                      className: "font-bold text-xl mb-2"
                                    }, Utils.str(item[/* event_name */1])), React.createElement("p", {
                                      className: "text-grey-darker text-base"
                                    }, Utils.str(item[/* event_date */2] + (", " + (item[/* event_startTime */3] + (" - " + item[/* event_endTime */4]))))), React.createElement("p", {
                                      className: "text-grey-darker text-base py-2"
                                    }, Utils.str("E359, 20 Chancellors Walk"))), React.createElement("div", {
                                  className: "px-6 py-4"
                                }, $$Array.map((function (item) {
                                        Utils.incrementId(tableKey);
                                        return React.createElement("span", {
                                                    key: String(tableKey[0]),
                                                    className: "inline-block bg-orange-lighter rounded-full px-3 py-1 text-sm font-semibold text-grey-darker mr-2"
                                                  }, Utils.str("#" + item));
                                      }), item[/* event_tags */7]))));
            }),
          /* initialState */component$1[/* initialState */10],
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */component$1[/* reducer */12],
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var EventItem = /* module */[
  /* component */component$1,
  /* make */make
];

function make$1(userId, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Fetch */Block.__(0, [
                            "chronological_order_events",
                            /* array */[userId]
                          ]));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = Caml_obj.caml_equal(self[/* state */1][/* sub_clubs */4], /* array */[]);
              var tmp;
              if (match) {
                tmp = React.createElement("div", undefined);
              } else {
                var match$1 = Caml_array.caml_array_get(Caml_array.caml_array_get(self[/* state */1][/* sub_clubs */4], 0), 0) === "-1" && Caml_array.caml_array_get(Caml_array.caml_array_get(self[/* state */1][/* sub_tags */3], 0), 0) === "-1";
                tmp = match$1 ? React.createElement("div", {
                        className: "w-full text-center py-4"
                      }, Utils.str("There are no clubs for you to subscribe to.")) : $$Array.map((function (item) {
                          Utils.incrementId(tableKey);
                          return React.createElement("button", {
                                      key: String(tableKey[0]),
                                      className: "inline-block bg-red-lighter rounded-full px-3 py-1 text-sm font-semibold text-grey-darker mr-2",
                                      value: Caml_array.caml_array_get(item, 0),
                                      onClick: (function (e) {
                                          return Curry._1(self[/* send */3], /* Fetch */Block.__(0, [
                                                        "get_tagged_events",
                                                        /* array */[
                                                          userId,
                                                          Utils.getButtonValueFromEvent(e)
                                                        ]
                                                      ]));
                                        })
                                    }, Utils.str("#" + Caml_array.caml_array_get(item, 1)));
                        }), self[/* state */1][/* sub_clubs */4]);
              }
              var match$2 = Caml_obj.caml_equal(self[/* state */1][/* sub_tags */3], /* array */[]);
              var tmp$1;
              if (match$2) {
                tmp$1 = React.createElement("div", {
                      className: "w-full text-center py-4"
                    }, React.createElement("i", {
                          className: "fas fa-spinner fa-pulse"
                        }), React.createElement("p", undefined, Utils.str("Loading subscriptions..")));
              } else {
                var match$3 = Caml_array.caml_array_get(Caml_array.caml_array_get(self[/* state */1][/* sub_clubs */4], 0), 0) === "-1" && Caml_array.caml_array_get(Caml_array.caml_array_get(self[/* state */1][/* sub_tags */3], 0), 0) === "-1";
                tmp$1 = match$3 ? React.createElement("div", {
                        className: "w-full text-center py-4"
                      }, Utils.str("There are no clubs for you to subscribe to.")) : $$Array.map((function (item) {
                          Utils.incrementId(tableKey);
                          return React.createElement("button", {
                                      key: String(tableKey[0]),
                                      className: "inline-block bg-blue-lighter rounded-full px-3 py-1 text-sm font-semibold text-grey-darker mr-2",
                                      value: Caml_array.caml_array_get(item, 0),
                                      onClick: (function (e) {
                                          return Curry._1(self[/* send */3], /* Fetch */Block.__(0, [
                                                        "get_tagged_events",
                                                        /* array */[
                                                          userId,
                                                          Utils.getButtonValueFromEvent(e)
                                                        ]
                                                      ]));
                                        })
                                    }, Utils.str("#" + Caml_array.caml_array_get(item, 1)));
                        }), self[/* state */1][/* sub_tags */3]);
              }
              var match$4 = Caml_obj.caml_equal(self[/* state */1][/* events */1], /* array */[]);
              var tmp$2;
              if (match$4) {
                tmp$2 = React.createElement("div", {
                      className: "w-full text-center py-4"
                    }, React.createElement("i", {
                          className: "fas fa-spinner fa-pulse"
                        }), React.createElement("p", undefined, Utils.str("Loading Events..")));
              } else {
                var match$5 = Caml_array.caml_array_get(Caml_array.caml_array_get(self[/* state */1][/* events */1], 0), 0)[/* event_id */0] === "-1";
                tmp$2 = match$5 ? React.createElement("div", {
                        className: "w-full text-center py-4"
                      }, Utils.str("No events available!")) : $$Array.map((function (arrayOfArrays) {
                          return $$Array.map((function (array) {
                                        Utils.incrementId(tableKey);
                                        return ReasonReact.element(String(tableKey[0]), undefined, make(array, /* array */[]));
                                      }), arrayOfArrays);
                        }), self[/* state */1][/* events */1]);
              }
              return React.createElement("div", {
                          className: "container mx-auto w-full py-10 flex flex-wrap items-stretch"
                        }, React.createElement("div", {
                              className: "w-full text-center py-4"
                            }, React.createElement("div", {
                                  className: "p-4"
                                }, React.createElement("h1", {
                                      className: "py-4"
                                    }, Utils.str("Welcome to MONTEA, " + self[/* state */1][/* name */2])), React.createElement("p", {
                                      className: ""
                                    }, Utils.str("There are lots of great events coming up this week! Here are a selection of the events coming up this week based on your subscriptions.")), React.createElement("p", {
                                      className: "pb-4"
                                    }, Utils.str("You have subscribed to the following topics:")), tmp, tmp$1, React.createElement("button", {
                                      className: "inline-block bg-green-lighter rounded-full px-3 py-1 text-sm font-semibold text-grey-darker mr-2",
                                      onClick: (function (_e) {
                                          return Curry._1(self[/* send */3], /* Fetch */Block.__(0, [
                                                        "chronological_order_events",
                                                        /* array */[userId]
                                                      ]));
                                        })
                                    }, Utils.str("Show All Events")))), tmp$2);
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* data */undefined,
                      /* events : array */[],
                      /* name */"(Loading User)",
                      /* sub_tags : array */[],
                      /* sub_clubs : array */[]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.tableKey = tableKey;
exports.component = component;
exports.createEventArray = createEventArray;
exports.reducer = reducer;
exports.EventItem = EventItem;
exports.make = make$1;
/* component Not a pure module */
