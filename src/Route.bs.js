// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("./Map.bs.js");
var Home = require("./Home.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Profile = require("./Profile.bs.js");
var YourEvents = require("./YourEvents.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function mapUrlToRoute(url) {
  var match = url[/* path */0];
  if (match) {
    switch (match[0]) {
      case "home" : 
          if (match[1]) {
            return /* NotFound */4;
          } else {
            return /* Home */0;
          }
      case "map" : 
          if (match[1]) {
            return /* NotFound */4;
          } else {
            return /* Map */2;
          }
      case "profile" : 
          if (match[1]) {
            return /* NotFound */4;
          } else {
            return /* Profile */3;
          }
      case "your-events" : 
          if (match[1]) {
            return /* NotFound */4;
          } else {
            return /* YourEvents */1;
          }
      default:
        return /* NotFound */4;
    }
  } else {
    return /* NotFound */4;
  }
}

function reducer(action, _state) {
  return /* Update */Block.__(0, [/* record */[/* route */action[0]]]);
}

var component = ReasonReact.reducerComponent("Route");

function make(userId, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var watchId = ReasonReact.Router[/* watchUrl */2]((function (url) {
                      return Curry._1(self[/* send */3], /* ChangeRoute */[mapUrlToRoute(url)]);
                    }));
              return Curry._1(self[/* onUnmount */4], (function (param) {
                            return ReasonReact.Router[/* unwatchUrl */3](watchId);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* route */0];
              var tmp;
              switch (match) {
                case 0 : 
                    tmp = ReasonReact.element(undefined, undefined, Home.make(userId, /* array */[]));
                    break;
                case 1 : 
                    tmp = ReasonReact.element(undefined, undefined, YourEvents.make(/* array */[]));
                    break;
                case 2 : 
                    tmp = ReasonReact.element(undefined, undefined, $$Map.make(/* array */[]));
                    break;
                case 3 : 
                    tmp = ReasonReact.element(undefined, undefined, Profile.make(userId, /* array */[]));
                    break;
                case 4 : 
                    tmp = React.createElement("div", {
                          className: "section"
                        }, "Page does not exist. ");
                    break;
                
              }
              return React.createElement("div", {
                          className: "container scrollable-x column is-10"
                        }, tmp);
            }),
          /* initialState */(function (param) {
              return /* record */[/* route : Home */0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.mapUrlToRoute = mapUrlToRoute;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
/* component Not a pure module */
